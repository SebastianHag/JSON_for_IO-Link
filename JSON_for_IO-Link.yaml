openapi: 3.0.3
info:
  description: >-
    This is a sample IO-Link Master server. You can find out more about IO-Link
    at [http://www.io-link.com](http://www.io-link.com)

    # Description

    * Draft for version 1.x

    ## Disclaimer:

    >The attention of adopters is directed to the possibility that compliance with or adoption of IO-Link Community specifications may require use of an invention covered by patent rights. The IO-Link Community shall not be responsible for identifying patents for which a license may be required by any IO-Link Community specification, or for conducting legal inquiries into the legal validity or scope of those patents that are brought to its attention. IO-Link Community specifications are prospective and advisory only. Prospective users are responsible for protecting themselves against liability for infringement of patents. 


    >The information contained in this document is subject to change without notice. The material in this document details an IO-Link Community specification in accordance with the license and notices set forth on this page. This document does not represent a commitment to implement any portion of this specification in any company's products. 


    >WHILE  THE  INFORMATION  IN  THIS  PUBLICATION   IS  BELIEVED  TO  BE ACCURATE, THE IO-LINK COMMUNITY MAKES NO WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED,  WITH REGARD TO  THIS MATERIAL INCLUDING, BUT  NOT LIMITED  TO  ANY  WARRANTY  OF  TITLE  OR  OWNERSHIP,  IMPLIED  WARRANTY  OF MERCHANTABILITY OR  WARRANTY OF FITNESS FOR  PARTICULAR PURPOSE OR USE.  


    >In  no  event  shall  the IO-Link Community be liable  for  errors  contained  herein  or  for  indirect, incidental,  special,  consequential,  reliance  or  cover  damages,  including  loss  of profits, revenue, data or use, incurred by any user or any third party.   Compliance  with  this  specification  does  not  absolve  manufacturers  of IO-Link equipment,  from  the  requirements  of  safety  and regulatory agencies (TÃœV, BIA, UL, CSA, etc.). 


    >IO-Link is a registered trademark. It may be used only by the members of the IO-Link Community and non-members who had acquired the corresponding license. For more detailed information on its use, refer to the rules of the IO-Link Community at www.io-link.com.
  version: 1.1.0
  title: Swagger IO-Link Master
  contact:
    email: info@io-link.com
  license:
    name: tbd
    url: 'http://www.io-link.com'

servers:
  - url: '{scheme}://{host}/{basePath}'
    variables:
      host:
        default: 'iolmaster.io-link.com'
      basePath:
        default: iolink/v1
      scheme:
        description: 'The IO-Link gateway can expose the API over https and/or http'
        enum:
          - 'https'
          - 'http'
        default: 'http'
tags:
  - name: general
    description: Access to general informations
  - name: gateway
    description: Access to parameters of the JSON gateway
  - name: mqtt
    description: Access to the parameters of the MQTT client
  - name: iodds
    description: Access to the IODDs
  - name: masters
    description: Access to parameters of the IO-Link master itself
  - name: tracks
    description: Access to the tracks (radios) of the IO-Link wireless master
  - name: ports
    description: Access to the IO-Link ports of the IO-Link master
  - name: devices
    description: Access to the IO-Link Devices connected ot the Master

paths:
  ################################################################################
  '/login':
    get:
      tags:
        - general
      summary: Returns the login status of the user
      description: >-
        Returns the login status of the user as a boolean value
      operationId: getUsersLogin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  isLoggedIn:
                    type: boolean
                  userRole:
                    type: string
                    description: 'Is true in case of a valid user, that is logged in.'
              example:
                isLoggedIn: true
                userRole: 'Operator'
    post:
      tags:
        - general
      summary: Logs in with credentials and returns the session bearer token.
      description: >-
        Credentials based authentication - Depending on technical feasibility, the HTTP cookie header shall be used. If the backend does not support cookies, the session bearer token shall be sent in the JSON body. The client has to support both mechanisms.
      operationId: postUsersLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: fred
                password: '12345678'
      security: []
      responses:
        '200':
          description: >
            Successfully authenticated. <br><br> The set cookie header is only
            sent if the server supports HTTP cookies. Otherwise, the session ID
            is also sent in the JSON body.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSIONID=abcde12345; Path=/; HttpOnly; Secure;
          content:
            application/json:
              schema:
                required:
                  - userRole
                properties:
                  SESSIONID:
                    type: string
                  userRole:
                    type: string
                    enum:
                      - Operator
                      - Maintenance
                      - Specialist
              examples:
                without cookie handling:
                  value:
                    SESSIONID: abc123abc123
                    userRole: Maintenance
                with cookie handling:
                  value:
                    userRole: Maintenance

        '401':
          $ref: '#/components/responses/HTTP_401'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/logout':
    post:
      tags:
        - general
      summary: Logs out and invalidates the Session-Token.
      description: >-
        This command does not discern between a logged out or a logged in user.
      operationId: postUsersLogout
      responses:
        '204':
          description: |
            Successfully logged out. Session-Token is now invalid.
        '401':
          description: |
            Session-Token invalid or not found. No action.
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/eventObject'
              example:
                code: 141
                message: 'Unknown SESSIONID'
  '/specs':
    get:
      operationId: GetSpecs
      tags:
        - general
      summary: Read the version information as list of specification references.
      description: >-
        This command is mandatory.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - specUri
                properties:
                  specUri:
                    type: string
                  specDesc:
                    type: string
                example: # Wireless Master with Profinet
                  - specUri: 'http://www.io-link.com/io-link/10.222/V2.0'
                    specDesc: 'JSON Integration for IO-Link - Draft V2.0'
                  - specUri: 'http://www.io-link.com/io-link/10.222/V1.0'
                    specDesc: 'JSON Integration for IO-Link V1.0'
                  - specUri: 'http://www.io-link.com/io-link/10.002/V1.13'
                    specDesc: 'IO-Link Interface and System Specification V1.13'
                  - specUri: 'http://www.io-link.com/io-link/10.122/V1.1'
                    specDesc: 'IO-Link Wireless System Extensions V1.1'
                  - specUri: 'http://profibus.com/profinet/2.722/V2.4MU2'
                    specDesc: 'Application Layer protocol for decentralized periphery - Technical Specification for PROFINET IO'
                  - specUri: 'http://profibus.com/profinet/2.712/V2.4MU2'
                    specDesc: 'Application Layer services for decentralized periphery - Technical Specification for PROFINET IO'
  '/gateways':
    get:
      operationId: GetGateways
      tags:
        - general
      summary: Read the known IO-Link gateways as list of URLs.
      description: >-
        This command is optional.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - gatewayUrl
                  properties:
                    gatewayUrl:
                      type: string
                    masterNumber:
                      type: integer
                      minimum: 1
                    portNumber:
                      type: integer
                      minimum: 1
                example:
                  - gatewayAlias: gateway1
                    gatewayUrl: 'http://gateway1'
                  - gatewayAlias: gatewayXYZ
                    gatewayUrl: 'http://gatewayXYZ'
                  - gatewayAlias: BNI_IOL
                    gatewayUrl: 'https://BNI_IOL/'
                  - gatewayAlias: master1
                    gatewayUrl: 'https://192.168.88.191'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/gateway/identification':
    get:
      operationId: GetGatewayIdentification
      tags:
        - gateway
      summary: Read the identification of the Gateway.
      description: Read the identification of the Gateway.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/gatewayIdentificationGet'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/gateway/capabilities':
    get:
      operationId: PostGatewayCapabilities
      tags:
        - gateway
      summary: Read the capabilities of the Gateway.
      description: Read the capabilities of the Gateway.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/gatewayCapabilitiesGet'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/gateway/configuration':
    get:
      operationId: GetGatewayConfiguration
      tags:
        - gateway
      summary: Read the configuration of the Gateway.
      description: Read the actual active configuration of the IO-Link Gateway. The Gateway may support multiple IPv4 interfaces
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/gatewayConfigurationGetPost'
              examples:
                Manual:
                  value:
                    ethIpv4:
                      - ipConfiguration: MANUAL
                        ipAddress: 192.168.1.13
                        subnetMask: 255.255.255.0
                        standardGateway: 192.168.1.1
                DHCP:
                  value:
                    ethIpv4:
                      - ipConfiguration: DHCP
                        ipAddress: 192.168.100.5
                        subnetMask: 255.255.255.0
                        standardGateway: 192.168.100.1
                Multiple ethernet interfaces:
                  value:
                    ethIpv4:
                      - ipConfiguration: MANUAL
                        ipAddress: 192.168.1.13
                        subnetMask: 255.255.255.0
                        standardGateway: 192.168.1.1
                      - ipConfiguration: MANUAL
                        ipAddress: 192.168.2.10
                        subnetMask: 255.255.255.0
                        standardGateway: 192.168.2.1
                      - ipConfiguration: DHCP
                        ipAddress: 192.168.200.7
                        subnetMask: 255.255.255.0
                        standardGateway: 192.168.200.1
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'
    post:
      operationId: PostGatewayConfiguration
      tags:
        - gateway
      summary: Write the configuration of the Gateway.
      description: Write the configuration of the Gateway.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/gatewayConfigurationGetPost'
            examples:
              Manual:
                value:
                  ethIpv4:
                    - ipConfiguration: MANUAL
                      ipAddress: 192.168.1.13
                      subnetMask: 255.255.255.0
                      standardGateway: 192.168.1.1
              DHCP:
                value:
                  ethIpv4:
                    - ipConfiguration: DHCP
              Multiple ethernet interfaces:
                value:
                  ethIpv4:
                    - ipConfiguration: MANUAL
                      ipAddress: 192.168.1.13
                      subnetMask: 255.255.255.0
                      standardGateway: 192.168.1.1
                    - ipConfiguration: MANUAL
                      ipAddress: 192.168.2.10
                      subnetMask: 255.255.255.0
                      standardGateway: 192.168.2.1
                    - ipConfiguration: DHCP
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 204, 205, 206,208, 701,702,703
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/gateway/reset':
    post:
      operationId: PostGatewayReset
      tags:
        - gateway
      summary: Reset the Gateway including all Masters. Optional.
      description: Invoke a reset of the IO-Link Gateway. This may reset all configuration data and interrupt all communications channels. It is recommended to log this within the EventLog.
      responses:
        '204':
          description: Successful operation
        '400': # code 104
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/gateway/reboot':
    post:
      operationId: PostGatewayReboot
      tags:
        - gateway
      summary: Reboot the Gateway including all Masters. Optional.
      description: Invoke a reboot of the IO-Link Gateway. This may reset all configuration data and interrupt all communications channels. It is recommended to log this within the EventLog
      responses:
        '204':
          description: Successful operation
        '400': # code 104
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/gateway/events':
    get:
      operationId: GetGatewayEvents
      tags:
        - gateway
      summary: Read the EventLog containing all events from Gateway, Masters, Ports and Devices.
      description:
        Each Gateway shall have an Event Log object containing the events of the devices, ports and
        the masters. The content of the Event Log can be read by getting the object "Gateway Event Log"
      parameters:
        - $ref: '#/components/parameters/eventOrigin'
        - $ref: '#/components/parameters/eventMasterNumber'
        - $ref: '#/components/parameters/eventPortNumber'
        - $ref: '#/components/parameters/eventdeviceAlias'
        - $ref: '#/components/parameters/eventTop'
        - $ref: '#/components/parameters/eventBottom'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/gatewayEventsGet'
              examples:
                origin=ALL:
                  value:
                    - time: '2018-05-18T07:31:54.123Z'
                      severity: WARNING
                      origin:
                        masterNumber: 1
                      message:
                        text: IO-Link Master has restarted
                    - time: '2018-05-18T07:32:42.023Z'
                      severity: ERROR
                      origin:
                        masterNumber: 1
                        portNumber: 1
                      message:
                        code: 6163
                        mode: APPEARS
                        text: Overcurrent at C/Q (if digital output) - check load
                    - time: '2018-05-18T07:31:54.123Z'
                      severity: WARNING
                      origin:
                        masterNumber: 1
                        portNumber: 1
                        deviceAlias: Temp_sensor_1
                      message:
                        code: 16912
                        mode: APPEARS
                        text: Device temperature over-run â€“ Clear source of heat
                origin=MASTERS:
                  value:
                    - time: '2018-05-18T07:31:54.123Z'
                      severity: WARNING
                      origin:
                        masterNumber: 1
                      message:
                        text: IO-Link Master has restarted
                origin=PORTS:
                  value:
                    - time: '2018-05-18T07:32:42.023Z'
                      severity: ERROR
                      origin:
                        masterNumber: 1
                        port: 1
                      message:
                        code: 6163
                        mode: APPEARS
                        text: Overcurrent at C/Q (if digital output) - check load
                    - time: '2018-05-18T07:33:42.023Z'
                      severity: ERROR
                      origin:
                        masterNumber: 1
                        portNumber: 1
                      message:
                        code: 6163
                        mode: DISAPPEARS
                        text: Overcurrent at C/Q (if digital output) - check load
                    - time: '2018-05-18T07:35:54.123Z'
                      severity: NOTICE
                      origin:
                        masterNumber: 1
                        portNumber: 2
                      message:
                        code: 65313
                        mode: SINGLESHOT
                        text: New slave
                origin=DEVICES:
                  value:
                    - time: '2018-05-18T07:31:54.123Z'
                      severity: WARNING
                      origin:
                        masterNumber: 1
                        portNumber: 1
                        deviceAlias: Temp_sensor_1
                      message:
                        code: 16912
                        mode: APPEARS
                        text: Device temperature over-run â€“ Clear source of heat
                    - time: '2018-05-18T08:31:54.123Z'
                      severity: ERROR
                      origin:
                        masterNumber: 1
                        portNumber: 3
                        deviceAlias: Distance_Laser_3
                      message:
                        code: 20480
                        mode: APPEARS
                        text: Device hardware fault â€“ Device exchange
        '400': # code 305, 306
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'
    delete:
      operationId: DeleteGatewayEvents
      tags:
        - gateway
      summary: Delete events of Gateway, Masters, Ports and Devices from EventLog according to filter query.
      description: Delete events of Gateway, Masters, Ports and Devices from EventLog according to filter query.
      parameters:
        - $ref: '#/components/parameters/eventOrigin'
        - $ref: '#/components/parameters/eventMasterNumber'
        - $ref: '#/components/parameters/eventPortNumber'
        - $ref: '#/components/parameters/eventdeviceAlias'
        - $ref: '#/components/parameters/eventTop'
        - $ref: '#/components/parameters/eventBottom'
      responses:
        '200':
          description: Successful operation
        '400': # code 305, 306
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/mqtt/configuration':
    get:
      operationId: GetMqttConfiguration
      tags:
        - mqtt
      summary: >-
        Read the MQTT configuration of the Gateway.
      description: Read the MQTT configuration of the Gateway.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/mqttConfigurationGetPost'
              examples:
                Active client:
                  value:
                    clientMode: 'ACTIVE'
                    serverAddress: 192.168.2.1:1883/mqttbroker
                    username: iolink_json
                    password: '1234'
                    lastwill:
                      topic: process_data
                      message: Process data transfer stopped.
                      qos: 0_ONLY_ONCE
                      retain: true
                    keepAliveTime: 10
                Inactive client:
                  value:
                    clientMode: 'INACTIVE'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

    post:
      operationId: PostMqttConfiguration
      tags:
        - mqtt
      summary: >-
        Update the MQTT configuration of the Gateway.
      description: Update the MQTT configuration of the Gateway.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/mqttConfigurationGetPost'
            examples:
              Active Client:
                value:
                  clientMode: ACTIVE
                  serverAddress: 192.168.2.1:1883/mqttbroker
                  username: iolink_json
                  password: '1234'
                  lastwill:
                    topic: process_data
                    message: Process data transfer stopped.
                    qos: 0_ONLY_ONCE
                    retain: true
                  keepAliveTime: 10
              Inactive Client:
                value:
                  clientMode: INACTIVE
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 204, 205, 206, 208, 701, 702, 703
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/mqtt/topics':
    get:
      operationId: GetMqttTopics
      tags:
        - mqtt
      summary: Get the list of MQTT topics.
      description: Get the list of MQTT topics.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas.yaml#/mqttConfigurationTopicGet'
              example:
                - topicId: 1
                  topicName: Sensor34/processData
                  qos: 1_AT_LEAST_ONCE
                  deviceAlias: DT35
                  processData:
                    direction: getData
                    format: iodd
                    interval:
                      value: 10
                      unit: ms
                - topicId: 2
                  topicName: Sensor34/event
                  qos: 1_AT_LEAST_ONCE
                  deviceAlias: TAD081
                  event: {}
                - topicId: 3
                  topicName: PD
                  qos: 0_ONLY_ONCE
                  deviceAlias: BNI_IOL
                  processData:
                    direction: getSetData
                    format: iodd
                    onChange: true
                - topicId: 4
                  topicName: DT35_CycleTime
                  qos: 0_ONLY_ONCE
                  deviceAlias: DT35
                  parameter:
                    parametereName: Direct_Parameters_1
                    subParameterName: Min_Cycle_Time
                    format: iodd
                    onChange: true
                - topicId: 5
                  topicName: deviceTemperature
                  qos: 0_ONLY_ONCE
                  deviceAlias: master1port2
                  parameter:
                    index: 153
                    format: byteArray
                    interval:
                      value: 10
                      unit: ms
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
    post:
      operationId: PostMqttTopicsTopicId
      tags:
        - mqtt
      summary: Create a new MQTT topic.
      description: Create a new MQTT topic.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/mqttConfigurationTopicPost'
            examples:
              Process Data:
                value:
                  qos: 1_AT_LEAST_ONCE
                  deviceAlias: DT35
                  processData:
                    direction: getData
                    format: iodd
                    interval:
                      value: 10
                      unit: ms
              Event:
                value:
                  qos: 1_AT_LEAST_ONCE
                  deviceAlias: TAD081
                  event: {}
              Parameter (Index):
                value:
                  qos: 0_ONLY_ONCE
                  deviceAlias: master1port1
                  parameter:
                    index: 86
                    format: byteArray
                    interval:
                      value: 10
                      unit: ms
              Parameter (ParameterName):
                value:
                  topicName: deviceTemperature
                  qos: 0_ONLY_ONCE
                  deviceAlias: AHM36A
                  parameter:
                    parameterName: Temperature1
                    format: iodd
                    interval:
                      value: 1000
                      unit: ms
      responses:
        '200':
          description: Successful operation returning the topic ID
          content:
            application/json:
              schema:
                type: integer
        '400': # code 104, 201, 202, 203, 204, 205, 206, 208, 701, 702
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
  '/mqtt/topics/{topicId}':
    get:
      operationId: GetMqttTopicsTopicId
      tags:
        - mqtt
      summary: Get one MQTT topic.
      description: Get one MQTT topic.
      parameters:
        - $ref: '#/components/parameters/mqttTopicId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/mqttConfigurationTopicGet'
              examples:
                Process Data:
                  value:
                    topicId: 1
                    topicName: PD input
                    qos: 1_AT_LEAST_ONCE
                    deviceAlias: DT35
                    processData:
                      direction: getData
                      format: iodd
                      interval:
                        value: 10
                        unit: ms
                Event:
                  value:
                    topicId: 2
                    topicName: Event
                    qos: 1_AT_LEAST_ONCE
                    deviceAlias: TAD081
                    event: {}
                Parameter (Index):
                  value:
                    topicId: 3
                    topicName: devvice/indexXY
                    qos: 0_ONLY_ONCE
                    deviceAlias: master1port1
                    parameter:
                      index: 86
                      format: byteArray
                      interval:
                        value: 10
                        unit: ms
                Parameter (ParameterName):
                  value:
                    topicId: 5
                    topicName: deviceTemperature
                    qos: 0_ONLY_ONCE
                    deviceAlias: AHM36A
                    parameter:
                      parameterName: Temperature1
                      format: iodd
                      interval:
                        value: 1000
                        unit: ms
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
    delete:
      operationId: DeleteMqttTopicsTopicId
      tags:
        - mqtt
      summary: Delete a specific MQTT topic.
      description: Delete a specific MQTT topic.
      parameters:
        - $ref: '#/components/parameters/mqttTopicId'
      responses:
        '204':
          description: Successful operation
        '400': # code 104
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
  '/mqtt/connectionstatus':
    get:
      operationId: GetMqttConnectionstatus
      tags:
        - mqtt
      summary: Read the connection status of the MQTT client to the MQTT server.
      description: Read the connection status of the MQTT client to the MQTT server.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/mqttConnectionStatusGet'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
  '/iodds':
    get:
      operationId: GetIodds
      tags:
        - iodds
      summary: >-
        Get a list of all IODD (representations) that are available on the Gateway.
      description: >-
        Only one version of an IODD is stored on the webserver at the same time
        for one vendorId-deviceId-ioLinkRevision-combination.
      parameters:
        - $ref: '#/components/parameters/vendorId'
        - $ref: '#/components/parameters/deviceId'
        - $ref: '#/components/parameters/revision'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/ioddsGet'
        '400': # code 305, 306
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
    delete:
      operationId: DeleteIodds
      tags:
        - iodds
      summary: Delete a specific IODD representation.
      description: Delete a specific IODD representation.
      parameters:
        - $ref: '#/components/parameters/vendorId'
        - $ref: '#/components/parameters/deviceId'
        - $ref: '#/components/parameters/revision'
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 305, 306
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
  '/iodds/file':
    get:
      operationId: GetIoddsFile
      tags:
        - iodds
      summary: Get a specific IODD. Optional.
      description: All query parameters are mandatory.
      parameters:
        - $ref: '#/components/parameters/vendorId'
        - $ref: '#/components/parameters/deviceId'
        - $ref: '#/components/parameters/revision'
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: './schemas.yaml#/ioddFile'
              example: 'IODD XML file'
        '400': # code 305, 306
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
    post:
      operationId: PostIoddsFile
      tags:
        - iodds
      summary: Store or update an IODD.
      description: >
        It is not needed to specify the identification data for this action as the
        parser can read this information.
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: './schemas.yaml#/ioddFile'
            example: 'IODD XML file'
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 208, 603, 604, 605
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500': # code 101, 602
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
  '/masters':
    get:
      operationId: GetMasters
      tags:
        - masters
      summary: >-
        Read all the available masterNumber keys with the corresponding
        identification information.
      description: Read all the available masterNumber keys with the corresponding identification information.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/identificationMasters'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/masters/{masterNumber}/capabilities':
    get:
      operationId: GetMastersMasterNumberCapabilities
      tags:
        - masters
      summary: Read the capabilities of the Master.
      description: Read the capabilities of the Master.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/masterCapabilitiesGet'
              examples:
                wired:
                  value:
                    numberOfPorts: 8
                    maxPowerSupply: #overall power consumption
                      value: 0.3
                      unit: A
                # wireless: # @todo wireless
                #   value:
                #     masterType: Wireless_Master
                #     numberOfPorts: 40
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/masters/{masterNumber}/identification':
    get:
      operationId: GetMastersMasterNumberIdentification
      tags:
        - masters
      summary: Read the identification of the Master.
      description: Read the identification of the Master.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/identificationGet'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
    post:
      operationId: PostMastersMasterNumberIdentification
      tags:
        - masters
      summary: Write application specific identification to a Master.
      description: Write application specific identification to a Master.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/identificationPost'
            examples:
              All optional fiels:
                value:
                  applicationSpecificTag: Fallback reader at the end
                  locationTag: Down under
                  functionTag: Code reading
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 206, 208
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/masters/{masterNumber}/configuration': #@todo wireles
    get:
      operationId: GetMastersMasterNumberConfiguration
      tags:
        - masters
      summary: Read the actual configuration of the specified Master.
      description: Read the actual configuration of the specified Master.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/masterConfiguration'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'
    post:
      operationId: PostMastersMasterNumberConfiguration
      tags:
        - masters
      summary: Write the configuration of the specified Master.
      description: Write the configuration of the specified Master.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/masterConfiguration'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                '104':
                  value:
                    code: 104
                    message: Action locked by another client
                '201':
                  value:
                    code: 201
                    message: JSON parsing failed
                '202':
                  value:
                    code: 202
                    message: JSON data value invalid
                '203':
                  value:
                    code: 203
                    message: JSON data type invalid
                '206':
                  value:
                    code: 206
                    message: JSON data value out of bounds
                '208':
                  value:
                    code: 208
                    message: POST request without content
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'

  ################################################################################
  # tracks
  ################################################################################
  '/masters/{masterNumber}/tracks': #@todo wireles
    get:
      operationId: GetMastersMasterNumberTracks
      tags:
        - tracks
      summary: Read the information about the available wireless tracks. Mandatory for W-Masters.

      parameters:
        - $ref: '#/components/parameters/masterNumber'
      description: >-
        A W-Master can handle up to 5 transmission tracks in parallel, each trackNumber can handle a maximum of 8 W-Devices, thus supporting up to 40 W-Devices per W-Master.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                items:
                  type: object
                  required:
                    - trackNumber
                    - statusInfo
                  properties:
                    trackNumber:
                      type: integer
                      minimum: 1
                      maximum: 5
                    statusInfo:
                      type: string
                      enum:
                        - STOP
                        - CYCLIC
                        - ROAMING
                        - SCANNING
                        - PAIRING
                example:
                  tracksInfo:
                    - trackNumber: 1
                      statusInfo: 'STOP'
                    - trackNumber: 2
                      statusInfo: 'CYCLIC'
                    - trackNumber: 3
                      statusInfo: 'ROAMING'
                    - trackNumber: 4
                      statusInfo: 'SCANNING'
                    - trackNumber: 5
                      statusInfo: 'PAIRING'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/masters/{masterNumber}/tracks/scan': #@todo wireles
    post:
      operationId: PostMastersMasterNumberTracksScan
      tags:
        - tracks
      summary: Start scanning on the specified trackNumber. Mandatory for W-Masters.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
      description: >-
        Discover unpaired W-Devices in the proximity of the W-Master.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                txPower:
                  type: integer
                  minimum: 1
                  maximum: 31
              example:
                txPower: 31
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                '104':
                  value:
                    code: 104
                    message: Action locked by another client
                '201':
                  value:
                    code: 201
                    message: JSON parsing failed
                '202':
                  value:
                    code: 202
                    message: JSON data value invalid
                '203':
                  value:
                    code: 203
                    message: JSON data type invalid
                '205':
                  value:
                    code: 205
                    message: JSON data value out of range
                '208':
                  value:
                    code: 208
                    message: POST request without content
                '701':
                  value:
                    code: 701
                    message: Data set incomplete
                '702':
                  value:
                    code: 702
                    message: Data set not applicable
                '703':
                  value:
                    code: 703
                    message: Data set combination incompatible
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '503':
          $ref: '#/components/responses/HTTP_503'
    get:
      operationId: GetMastersMasterNumberTracksScan
      tags:
        - tracks
      summary: Read back the last scan result. Mandatory for W-Masters.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
      description: >-
        List the unique identifiers (UniqueID) of the discovered unpaired W-Devices.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  type: object
                  properties:
                    SlotType:
                      type: string
                      enum:
                        - SSLOT
                        - DSLOT
                    revisionId:
                      type: string
                    uniqueId:
                      type: string
                      minLength: 1
                      maxLength: 32
              example:
                - slotType: SSLOT
                  revisionId: '1.1'
                  uniqueId: 03:78:00:00:01:32:50:60:46
                  lastSeen: '2019-02-19T08:02:51.786Z'
                - slotType: DSLOT
                  revisionId: '1.1'
                  uniqueId: 03:78:00:00:01:32:50:60:47
                  lastSeen: '2019-02-19T08:02:51.786Z'
                - slotType: SSLOT
                  revisionId: '1.1'
                  uniqueId: 03:78:00:00:01:32:50:60:48
                  lastSeen: '2019-02-19T08:02:51.786Z'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '503':
          $ref: '#/components/responses/HTTP_503'
  '/masters/{masterNumber}/tracks/{trackNumber}/status': #@todo wireles
    get:
      operationId: GetMastersMasterNumberTracksTrackNumberstatus
      tags:
        - tracks
      summary: Read the status of the selected trackNumber. Mandatory for W-Masters.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/trackNumber'
      description: >-
        Indicates the actual operational mode of the trackNumber (STOP, CYCLIC, SCAN, PAIRING, ROAMING) and the transmission power of the trackNumber radio.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - trackNumber
                  - statusInfo
                  - txPower
                properties:
                  trackNumber:
                    type: integer
                    minimum: 1
                    maximum: 5
                  statusInfo:
                    type: string
                    enum:
                      - STOP
                      - CYCLIC
                      - ROAMING
                      - SCANNING
                      - PAIRING
                  txPower:
                    type: integer
                    minimum: 1
                    maximum: 31
                example:
                  trackNumber: 2
                  statusInfo: 'STOP'
                  txPower: 31
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/masters/{masterNumber}/tracks/{trackNumber}/statistics': #@todo wireles
    get:
      operationId: GetMastersMasterNumberTracksTrackNumberstatistics
      tags:
        - tracks
      summary: Read the statistics (Errors and PEP) of the selected trackNumber. Optional for W-Masters.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/trackNumber'
      description: >-
        Monitoring the wireless environment regarding reliability indicating link quality.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - trackNumber
                  - errors
                  - PEP
                properties:
                  trackNumber:
                    type: integer
                    minimum: 1
                    maximum: 5
                  errors:
                    type: integer
                    minimum: 0
                    maximum: 65535 # 65535 = no data available
                  PEP:
                    type: string
                # example: @todo wireles
                #     - trackNumber: 0
                #       errors: 0
                #       PEP: "-"
                #     - trackNumber: 1
                #       errors: 4
                #       PEP: "-"
                #     - trackNumber: 2
                #       errors: 5
                #       PEP: "-"
                #     - trackNumber: 3
                #       errors: 7
                #       PEP: "-"
                #     - trackNumber: 4
                #       errors: 5
                #       PEP: "-"
                #     - trackNumber: 5
                #       errors: 63
                #       PEP: 1.5380859375
                #     - trackNumber: 6
                #       errors: 6
                #       PEP: "-"
                #     - trackNumber: 7
                #       errors: 1
                #       PEP: "-"
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/masters/{masterNumber}/tracks/{trackNumber}/statisticsChannel': #@todo wireles
    get:
      operationId: GetMastersMasterNumberTracksTrackNumberstatisticsChannel
      tags:
        - tracks
      summary: Read the channel statistics (Errors %) of the selected trackNumber. Optional for W-Masters.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/trackNumber'
      description: >-
        Monitoring the wireless channel regarding reliability indicating link quality. 100 transmissions per channel are computed.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/tracksStatisticsChannel'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/masters/{masterNumber}/tracks/{trackNumber}/configuration': #@todo wireles
    get:
      operationId: GetMastersMasterNumberTracksTrackNumberConfiguration
      tags:
        - tracks
      summary: Read the configuration of the specified trackNumber. Mandatory for W-Masters.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/trackNumber'
      description: Read the configuration of the specified trackNumber. Mandatory for W-Masters.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/trackConfiguration'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
    post:
      operationId: PostMastersMasterNumberTracksTrackNumberConfiguration
      tags:
        - tracks
      summary: Write the configuration of the specified trackNumber. Mandatory for W-Masters.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/trackNumber'
      description: Write the configuration of the specified trackNumber. Mandatory for W-Masters.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/trackConfigurationPost'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                '104':
                  value:
                    code: 104
                    message: Action locked by another client
                '201':
                  value:
                    code: 201
                    message: JSON parsing failed
                '202':
                  value:
                    code: 202
                    message: JSON data value invalid
                '203':
                  value:
                    code: 203
                    message: JSON data type invalid
                '204':
                  value:
                    code: 204
                    message: Enumeration value unknown
                '205':
                  value:
                    code: 205
                    message: JSON data value out of range
                '208':
                  value:
                    code: 208
                    message: POST request without content
                '701':
                  value:
                    code: 701
                    message: Data set incomplete
                '702':
                  value:
                    code: 702
                    message: Data set not applicable
                '703':
                  value:
                    code: 703
                    message: Data set combination incompatible
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'

  ################################################################################
  # ports
  ################################################################################
  '/masters/{masterNumber}/ports':
    get:
      operationId: GetMastersMasterNumberPorts
      tags:
        - ports
      summary: Read all the available portNumber keys with the corresponding identification information.
      description: Read all the available portNumber keys with the corresponding identification information.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - portNumber
                    - statusInfo
                    - deviceAlias
                  properties:
                    portNumber:
                      type: number
                    deviceAlias:
                      type: string
                    statusInfo:
                      type: string
                      enum: # see Terminology in V.113, Table E.4 PortStatusList
                        - COMMUNICATION_LOST # NO_DEVICE
                        - DEACTIVATED # DEACTIVATED
                        - INCORRECT_DEVICE # PORT_DIAG
                        - DEVICE_STARTING #
                        - DEVICE_ONLINE # OPERATE
                        - DIGITAL_INPUT_C/Q # DI_CQ
                        - DIGITAL_OUTPUT_C/Q # DO_CQ
                        - NOT_AVAILABLE # NOT_AVAILABLE
                        - PORT_POWER_OFF # PORT_POWER_OFF
                        - PAIRING_FAULT # PAIRING_TIMEOUT, PAIRING_WRONG_SLOTTYPE
                    # slotNumber: # @todo wireles
                    #   type: number
                    # trackNumber:
                    #   type: number
                    # slotType:
                    #   type: string
                    #   enum:
                    #     - SSLOT
                    #     - DSLOT
                    # items:
                    #   type: object
                    #   properties:
                    #     vendorId:
                    #       type: number
                    #     deviceId:
                    #       type: number
                    #     productName:
                    #       type: string
              example:
                - portNumber: 1
                  statusInfo: 'DEVICE_ONLINE'
                  deviceAlias: 'Distance_Sensor'
                - portNumber: 2
                  statusInfo: 'DIGITAL_INPUT_C/Q'
                  deviceAlias: 'Switching_Sensor'
                # - portNumber: 3 # @todo wireles
                #   trackNumber: 1
                #   slotNumber: 2
                #   slotType: "SSLOT"
                #   statusInfo: "DEVICE_ONLINE"
                #   deviceAlias: "Wireless_Bridge"
                #   deviceInfo:
                #     vendorId: 888
                #     deviceId: 10485760
                #     productName: "BNI IOW-302-W01-K080"
                - portNumber: 4
                  statusInfo: 'DEACTIVATED'
                  deviceAlias: 'Empty_port'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/masters/{masterNumber}/ports/{portNumber}/capabilities':
    get:
      operationId: GetMastersMasterNumberPortsPortNumberCapabilities
      tags:
        - ports
      summary: Read the capability information of the specified port.
      description: Read the capability information of the specified port.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/portNumber'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/portCapabilitiesGet'
              examples:
                CLASS_A:
                  value:
                    maxPowerSupply:
                      value: 0.3
                      unit: A
                    portType: CLASS_A
                CLASS_B:
                  value:
                    maxPowerSupply:
                      value: 2.0
                      unit: A
                    portType: CLASS_B
                CLASS_A_WITH_PORT_POWER_OFF_ON:
                  value:
                    maxPowerSupply:
                      value: 0.3
                      unit: A
                    portType: CLASS_A_WITH_PORT_POWER_OFF_ON
                FAILSAFE_PORT_A_WITHOUT_SAFETY_DIGITAL_INPUTS:
                  value:
                    maxPowerSupply:
                      value: 0.2
                      unit: A
                    portType: FAILSAFE_PORT_A_WITHOUT_SAFETY_DIGITAL_INPUTS
                FAILSAFE_PORT_A_WITH_SAFETY_DIGITAL_INPUTS:
                  value:
                    maxPowerSupply:
                      value: 0.2
                      unit: A
                    portType: FAILSAFE_PORT_A_WITH_SAFETY_DIGITAL_INPUTS
                FAILSAFE_PORT_B:
                  value:
                    maxPowerSupply:
                      value: 2.0
                      unit: A
                    portType: FAILSAFE_PORT_B
                WIRELESS:
                  value:
                    portType: WIRELESS_MASTER
                    slotType: 'DSLOT'

        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'

  '/masters/{masterNumber}/ports/{portNumber}/status':
    get:
      operationId: GetMastersMasterNumberPortsPortNumberStatus
      tags:
        - ports
      summary: Read the actual status of the selected port.
      description: Read the actual status of the selected port.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/portNumber'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                # $ref: './schemas.yaml#/portStatusGet'
                type: object
                required:
                  - statusInfo
                properties:
                  statusInfo:
                    type: string
                    enum: # see Terminology in V.113, Table E.4 PortStatusList
                      - COMMUNICATION_LOST # NO_DEVICE
                      - DEACTIVATED # DEACTIVATED
                      - INCORRECT_DEVICE # PORT_DIAG
                      - DEVICE_STARTING #
                      - DEVICE_ONLINE # OPERATE
                      - DIGITAL_INPUT_C/Q # DI_CQ
                      - DIGITAL_OUTPUT_C/Q # DO_CQ
                      - NOT_AVAILABLE # NOT_AVAILABLE
                      - PORT_POWER_OFF # PORT_POWER_OFF
                      - PAIRING_FAULT # PAIRING_TIMEOUT, PAIRING_WRONG_SLOTTYPE

                  ioLinkRevision:
                    description: >-
                      Mandatory if the portStatusInfo is INCORRECT_DEVICE, PREOPERATE or
                      OPERATE.
                    type: string
                    enum:
                      - '1.0'
                      - '1.1'
                  transmissionRate:
                    description: >-
                      Mandatory if the portStatusInfo is INCORRECT_DEVICE, PREOPERATE or
                      OPERATE.
                    type: string
                    enum:
                      - COM1
                      - COM2
                      - COM3
                      - WIRELESS
                  masterCycleTime:
                    description: >-
                      Mandatory if the portStatusInfo is INCORRECT_DEVICE, PREOPERATE or
                      OPERATE.
                    type: object
                    allOf:
                      - $ref: './schemas.yaml#/cycleTime'
                  portQualityInfo:
                    type: object
                    required:
                      - value
                      - unit
                    properties:
                      value:
                        type: integer
                        minimum: 0
                        maximum: 100
                      unit:
                        type: string
                        enum:
                          - '%'
              examples:
                wired:
                  value:
                    statusInfo: 'DEVICE_ONLINE'
                    ioLinkRevision: '1.1'
                    transmissionRate: COM2
                    masterCycleTime:
                      value: 2.3
                      unit: ms
                wireless: # @todo wireles
                  value:
                    statusInfo: 'DEVICE_ONLINE'
                    ioLinkRevision: '1.1'
                    transmissionRate: WIRELESS
                    masterCycleTime:
                      value: 5
                      unit: 'ms'
                    portQuality:
                      value: 100
                      unit: '%'

        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/masters/{masterNumber}/ports/{portNumber}/configuration':
    get:
      operationId: GetMastersMasterNumberPortsPortNumberConfiguration
      tags:
        - ports
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/portNumber'
      summary: Read the actual configuration of the specified port.
      description: Read the actual configuration of the specified port.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/portConfigurationGet'
              example:
                mode: IOLINK_MANUAL
                validationAndBackup: TYPE_COMPATIBLE_DEVICE_V1.1
                iqConfiguration: DIGITAL_INPUT
                cycleTime:
                  value: 2.3
                  unit: ms
                vendorId: 26
                deviceId: 333
                deviceAlias: Distance_sensor_1
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
    post:
      operationId: PostMastersMasterNumberPortsPortNumberConfiguration
      tags:
        - ports
      summary: Write the configuration of the specified port.
      description: Write the configuration of the specified port.
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/portNumber'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/portConfigurationPost'
            examples:
              Complete configuration:
                value:
                  mode: IOLINK_MANUAL
                  validationAndBackup: TYPE_COMPATIBLE_DEVICE_V1.1
                  cycleTime:
                    value: 2.3
                    unit: ms
                  vendorId: 26
                  deviceId: 333
                  iqConfiguration: DIGITAL_INPUT
                  deviceAlias: Distance_sensor_1
              Change CQ mode:
                value:
                  mode: IOLINK_AUTOSTART
              Change iqConfiguration:
                value:
                  iqConfiguration: DIGITAL_OUTPUT
              Change the deviceAlias:
                value:
                  deviceAlias: Flow_control_1
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 204, 205, 207, 208, 701, 702, 703
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/masters/{masterNumber}/ports/{portNumber}/datastorage':
    get:
      operationId: GetMastersMasterNumberPortsPortNumberDatastorages
      tags:
        - ports
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/portNumber'
      summary: Read the Data Storage content of a specific port.
      description: Read the Data Storage content of a specific port.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/dataStorageGetPost'
              examples:
                Data Storage with valid content:
                  value:
                    header:
                      vendorId: 15
                      deviceId: 65253
                      ioLinkRevision: '1.1'
                      parameterChecksum: 123456
                    content: >-
                      TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGl
                Empty Data Storage:
                  value:
                    header: {}
                    content: ''
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
    post:
      operationId: PostMastersMasterNumberPortsPortNumberDatastorages
      tags:
        - ports
      parameters:
        - $ref: '#/components/parameters/masterNumber'
        - $ref: '#/components/parameters/portNumber'
      summary: Write the Data Storage content to a specific port.
      description: Write the Data Storage content to a specific port.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/dataStorageGetPost'
            examples:
              Data Storage with valid content:
                value:
                  header:
                    vendorId: 15
                    deviceId: 65253
                    ioLinkRevision: '1.1'
                  content: >-
                    TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGl
              Empty Data Storage:
                value:
                  header: {}
                  content: ''
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 204, 205, 206, 208, 401, 701
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
  ################################################################################
  # devices
  ################################################################################

  '/devices':
    get:
      operationId: GetDevices
      tags:
        - devices
      summary: Get all available deviceAlias keys and the location by Master number and Port number.
      description: Get all available deviceAlias keys and the location by Master number and Port number.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - deviceAlias
                    - masterNumber
                    - portNumber
                  properties:
                    deviceAlias:
                      type: string
                      minLength: 1
                      maxLength: 32
                    masterNumber:
                      type: integer
                      minimum: 1
                    portNumber:
                      type: integer
                      minimum: 1
                example:
                  - deviceAlias: DT35
                    masterNumber: 1
                    portNumber: 1
                  - deviceAlias: TAD081
                    masterNumber: 1
                    portNumber: 2
                  - deviceAlias: BNI_IOL
                    masterNumber: 1
                    portNumber: 3
                  - deviceAlias: master1port4
                    masterNumber: 1
                    portNumber: 4
        '403':
          $ref: '#/components/responses/HTTP_403'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/devices/{deviceAlias}/capabilities':
    get:
      operationId: GetDevicesDeviceAliasCapabilities
      tags:
        - devices
      summary: Read the capabilities from the specific Device.
      description: Read the capabilities from the specific Device.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
      responses:
        '200':
          description: Successful opearation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceCapabilitiesGet'
              example:
                minimumCycleTime:
                  value: 2.3
                  unit: ms
                supportedProfiles: [10, 32770]
        '400': # code 307
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/devices/{deviceAlias}/identification':
    get:
      operationId: GetDevicesDeviceAliasidentification
      tags:
        - devices
      summary: Read the identification from the specific Device.
      description: >-
        *Implementation hint*: You have to request the ISDU values of
        applicationSpecificTag, locationTag and functionTag (if they are
        supported by the device).
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceIdentificationGet'
        '400': # code 307
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
    post:
      operationId: PostDevicesDeviceAliasidentification
      tags:
        - devices
      summary: Write application specific identification to the Device.
      description: Write application specific identification to the Device.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/portIdentificationPost'
            examples:
              All optional fields:
                value:
                  applicationSpecificTag: Fallback light switch
                  locationTag: Down under
                  functionTag: Check start of belt
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 206, 208, 307
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
  '/devices/{deviceAlias}/processdata/value':
    get:
      operationId: GetDevicesDeviceAliasProcessData
      tags:
        - devices
      summary: Read the process data values (input and output) from the specified Device.
      description: Read the process data values (input and output) from the specified Device.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceProcessDataValueGet'
              examples:
                ? 'Format=byteArray, CQ in IO-Link (only input), IQ in digital output'
                : value:
                    getData:
                      ioLink:
                        valid: true
                        value:
                          - 12
                          - 22
                          - 216
                    setData:
                      iqValue: true
                ? 'Format=iodd, CQ in IO-Link (input and output), IQ in digital input'
                : value:
                    getData:
                      ioLink:
                        valid: true
                        value:
                          Distance:
                            value: 55
                            unit: 'cm'
                          Quality:
                            value: 12
                      iqValue: true
                    setData:
                      ioLink:
                        valid: true
                        value:
                          Buzzer:
                            value: 5
        '400': # code 305, 306, 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
    post:
      operationId: PostDevicesDeviceAliasProcessData
      tags:
        - devices
      summary: Write the process data output values to the specified Device.
      description: Write the process data output values to the specified Device.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/deviceProcessDataValuePost'
            examples:
              ? 'format=byteArray, CQ (pin4) in IO-Link, IQ (pin2) in digital output'
              : value:
                  ioLink:
                    valid: true
                    value:
                      - 15
                      - 123
                      - 126
                      - 236
                  iqValue: true
              'format=iodd, CQ (pin4) in IO-Link, IQ (pin2) not available':
                value:
                  iolink:
                    valid: true
                    value:
                      Valve_1:
                        value: true
                      Valve_2:
                        value: false
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 204, 205, 206, 208, 305, 306, 307, 501, 502, 503, 601, 701, 702, 703
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/processdata/getdata/value':
    get:
      operationId: GetDevicesDeviceAliasProcessDataGetData
      tags:
        - devices
      summary: >-
        Read the process data input values from the specified Device.
      description: Read the process data input values from the specified Device.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/processDataValue'
              examples:
                ? 'Format=byteArray, CQ (pin4) in IO-Link, IQ (pin2) in digital input'
                : value:
                    ioLink:
                      valid: true
                      value:
                        - 12
                        - 22
                        - 216
                    iqValue: true
                'Format=iodd, CQ (pin4) in IO-Link, IQ (pin2) in digital input':
                  value:
                    ioLink:
                      valid: true
                      value:
                        Distance:
                          value: 55
                          unit: 'cm'
                        Quality:
                          value: 12
                    iqValue: true
        '400': # code 305, 306, 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/processdata/setdata/value':
    get:
      operationId: GetDevicesDeviceAliasProcessDataSetData
      tags:
        - devices
      summary: >-
        Read the process data output values from the specified Device.
      description: Read the process data output values from the specified Device.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/processDataValue'
              examples:
                ? 'Format=byteArray, CQ (pin4) in digital output, IQ (pin2) in digital input'
                : value:
                    cqValue: false
                'Format=iodd, CQ (pin4) in IO-Link, IQ (pin2) in digital input':
                  value:
                    iolink:
                      valid: true
                      value:
                        Valve_1:
                          value: true
                        Valve_2:
                          value: false
        '400': # code 305, 306, 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/parameters':
    get:
      operationId: GetDevicesDeviceAliasParameters
      tags:
        - devices
      summary: >-
        Read all available parameter indices and parameter names from the specific Device.
        IODD support is required.
      description: Read all available parameter indices and parameter names from the specific Device. IODD support is required.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceParametersGet'
        '400': # code 305, 306, 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/parameters/{index}/value':
    get:
      operationId: GetDevicesDeviceAliasParametersIndexValue
      tags:
        - devices
      summary: Read a parameter value from the specific Device with the given index.
      description: Read a parameter value from the specific Device with the given index.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/index'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceParameterValueGetPost'
              examples:
                format=byteArray:
                  value:
                    value:
                      - 0
                      - 156
                      - 125
                      - 25
                'format=iodd, simple type':
                  value:
                    value: 15.2
                    unit: 'cm'
                'format=iodd, complex type':
                  value:
                    value:
                      Distance:
                        value: 15
                        unit: 'cm'
                      Quality:
                        value: 12
        '400': # code 305, 306, 307, 311, 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

    post:
      operationId: PostDevicesDeviceAliasParametersIndexValue
      tags:
        - devices
      summary: Write a parameter value with the given index to the specified Device.
      description: Write a parameter value with the given index to the specified Device.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/index'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/deviceParameterValueGetPost'
            examples:
              'payload as byteArray':
                value:
                  value:
                    - 0
                    - 156
                    - 125
                    - 25
              'payload as iodd, simple type':
                value:
                  value: 15.2
                  unit: 'cm'
              'payload as iodd, complex type':
                value:
                  value:
                    Distance:
                      value: 15
                      unit: 'cm'
                    Quality:
                      value: 12
      responses:
        '204':
          description: Successful operation
        '400': # code 103, 104, 201, 202, 203, 204, 205, 206, 208, 305, 306, 307, 311, 601, 701
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/parameters/{parameterName}/value':
    get:
      operationId: GetDevicesDeviceAliasParametersValue
      tags:
        - devices
      summary: >-
        Read a parameter value from the specific Device by parameter name.
        IODD support is required.
      description: Read a parameter value from the specific Device by parameter name. IODD support is required.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/parameterName'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceParameterValueGetPost'
              examples:
                format=byteArray:
                  value: { 'value': [0, 156, 125, 25] }
                'format=iodd, simple type':
                  value:
                    value: 15.2
                    unit: 'cm'
                'format=iodd, complex type':
                  value:
                    value:
                      Distance:
                        value: 15
                        unit: 'cm'
                      Quality:
                        value: 12

        '400': # code 305, 306, 307, 311, 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
    post:
      operationId: PostDevicesDeviceAliasParametersValue
      tags:
        - devices
      summary: >-
        Write a parameter value by name to the specified Device.IODD support is required.
        IODD support is required.
      description: Write a parameter value by name to the specified Device.IODD support is required. IODD support is required.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/parameterName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/deviceParameterValueGetPost'
            examples:
              format=byteArray:
                value: { 'value': [0, 156, 125, 25] }
              'format=iodd, simple type':
                value:
                  value: 15.2
                  unit: 'cm'
              'format=iodd, complex type':
                value:
                  value:
                    Distance:
                      value: 15
                      unit: 'cm'
                    Quality:
                      value: 12
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 204, 205, 206, 208, 307, 311, 601, 701
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/parameters/{index}/subindices':
    get:
      operationId: GetDevicesDeviceAliasParametersIndexSubindices
      tags:
        - devices
      summary: >-
        Read all available parameter sub-indices and sub-parameter names from the specific Device.
        IODD support is required.
      description: Read all available parameter sub-indices and sub-parameter names from the specific Device. IODD support is required.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/index'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceSubParametersGet'
        '400': # code 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/parameters/{parameterName}/subindices':
    get:
      operationId: GetDevicesDeviceAliasParametersSubindices
      tags:
        - devices
      summary: >-
        Read all available parameter sub-indices and sub-parameter names from the specific Device (referenced by parameter name).
        IODD support is required.
      description: Read all available parameter sub-indices and sub-parameter names from the specific Device (referenced by parameter name). IODD support is required.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/parameterName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceSubParametersGet'
        '400': # code 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/parameters/{index}/subindices/{subindex}/value':
    get:
      operationId: GetDevicesDeviceAliasParametersSubindicesSubindexValue
      tags:
        - devices
      summary: >-
        Read a parameter value from the specific Device with the given index and subindex.
      description: Read a parameter value from the specific Device with the given index and subindex.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/index'
        - $ref: '#/components/parameters/subindex'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceParameterSubindexValueGetPost'
              examples:
                format=byteArray:
                  value:
                    value:
                      - 0
                      - 156
                      - 125
                      - 25
                format=iodd:
                  value:
                    value:
                      Distance:
                        value: 15.2
                        unit: 'cm'
        '400': # code 305, 306, 307, 311, 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
    post:
      operationId: PostDevicesDeviceAliasParametersSubindicesSubindexValue
      tags:
        - devices
      summary: >-
        Write the parameter with the given index and subindex.
      description: Write the parameter with the given index and subindex.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/index'
        - $ref: '#/components/parameters/subindex'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/deviceParameterSubindexValueGetPost'
            examples:
              format=byteArray:
                value: { 'value': [0, 156, 125, 25] }
              format=iodd:
                value:
                  value: 15.2
                  unit: 'cm'
      responses:
        '204':
          description: Successful operation
        '400': # code 104, 201, 202, 203, 204, 205, 206, 208, 307, 311, 601, 701
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  ? '/devices/{deviceAlias}/parameters/{parameterName}/subindices/{subParameterName}/value'
  : get:
      operationId: GetDevicesDeviceAliasParametersSubindicesValue
      tags:
        - devices
      summary: >-
        Read a parameter value from the specific Device by parameter name and subname.
        IODD support is required.
      description: Read a parameter value from the specific Device by parameter name and subname. IODD support is required.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/parameterName'
        - $ref: '#/components/parameters/subParameterName'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceParameterSubindexValueGetPost'
              examples:
                format=byteArray:
                  value: { 'value': [0, 156, 125, 25] }
                format=iodd:
                  value:
                    value: 15.2
                    unit: 'cm'

        '400': # code 305, 306, 307, 311, 601
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'
    post:
      operationId: PostDevicesDeviceAliasParametersSubindicesValue
      tags:
        - devices
      summary: >-
        Write a parameter value to the specific Device by the parameter name and subname.
        IODD support is required.
      description: Write a parameter value to the specific Device by the parameter name and subname. IODD support is required.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/parameterName'
        - $ref: '#/components/parameters/subParameterName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/deviceParameterSubindexValueGetPost'
            examples:
              format=byteArray:
                value: { 'value': [0, 156, 125, 25] }
              format=iodd:
                value:
                  value: 15.2
                  unit: 'cm'
      responses:
        '204':
          description: Successful operation
        '400': # code 103, 104, 201, 202, 203, 204, 205, 206, 208, 307, 311, 601, 701
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/blockparameterization':
    post:
      operationId: PostDevicesDeviceAliasBlockparameterization
      tags:
        - devices
      summary: >-
        Write or read one or more parameters using the block parameterization method.
      description: Write or read one or more parameters using the block parameterization method.
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/format'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/deviceBlockParameterizationPost'
            examples:
              'read, format=byteArray':
                value:
                  direction: READ
                  parameters:
                    - identifier:
                        index: 15
                    - identifier:
                        index: 65
                        subIndex: 2
              'read, format=iodd':
                value:
                  direction: READ
                  parameters:
                    - identifier:
                        parameterName: Application_tag
                    - identifier:
                        parameterName: Distance
                        subParameterName: Quality
              'write, format=byteArray':
                value:
                  direction: WRITE
                  parameters:
                    - identifier:
                        index: 123
                      content:
                        value:
                          - 15
                          - 232
                          - 22
                    - identifier:
                        index: 233
                        subIndex: 2
                      content:
                        value:
                          - 23
                          - 149
                          - 206
              'write, format=iodd':
                value:
                  direction: WRITE
                  parameters:
                    - identifier:
                        parameterName: Application_tag
                      content:
                        value: 'Level 2, row 3'
                    - identifier:
                        parameterName: Hysteresis
                        subParameterName: Channel_B
                      content:
                        value: 123
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceBlockParameterizationPostParametersAnswer'
              examples:
                'read, format=byteArray':
                  value:
                    - identifier:
                        index: 123
                      result:
                        parameterExchangeResult: READ_SUCCESS
                        content:
                          value:
                            - 15
                            - 232
                            - 22
                    - identifier:
                        index: 233
                        subIndex: 2
                      result:
                        parameterExchangeResult: READ_SUCCESS
                        content:
                          value:
                            - 23
                            - 149
                            - 206
                'read, format=iodd':
                  value:
                    - identifier:
                        parameterName: Application_tag
                      result:
                        parameterExchangeResult: READ_SUCCESS
                        content:
                          value: 'Level 2, row 3'
                    - identifier:
                        parameterName: Hysteresis
                        subParameterName: Channel_B
                      result:
                        parameterExchangeResult: READ_SUCCESS
                        content:
                          value: 123
                'read, format=byteArray with error':
                  value:
                    - identifier:
                        index: 123
                      result:
                        parameterExchangeResult: ERROR
                        iolinkError:
                          code: 32802
                          message: Service temporarily not available â€“ Device control
                    - identifier:
                        index: 233
                      result:
                        parameterExchangeResult: ERROR
                        iolinkError:
                          code: 32803
                          message: Access denied
                'write, format=byteArray':
                  value:
                    - identifier:
                        index: 123
                      result:
                        parameterExchangeResult: WRITE_SUCCESS
                    - identifier:
                        index: 233
                      result:
                        parameterExchangeResult: WRITE_SUCCESS
                'write, format=iodd':
                  value:
                    - identifier:
                        parameterName: Application_tag
                      result:
                        parameterExchangeResult: WRITE_SUCCESS
                    - identifier:
                        parameterName: Hysteresis
                        subParameterName: Channel_B
                      result:
                        parameterExchangeResult: WRITE_SUCCESS
                'write, format=byteArray, with error':
                  value:
                    - identifier:
                        index: 123
                      result:
                        parameterExchangeResult: ERROR
                        iolinkError:
                          code: 32816
                          message: Parameter value out of range
                    - identifier:
                        index: 233
                      result:
                        parameterExchangeResult: ERROR
                        iolinkError:
                          code: 32817
                          message: Parameter value above limit
        '400': # code 104, 201, 202, 203, 204, 205, 206, 208, 305, 306, 307, 311, 601, 701, 702, 703
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
        '501':
          $ref: '#/components/responses/HTTP_501'

  '/devices/{deviceAlias}/events':
    get:
      operationId: GetDevicesDeviceAliasEvents
      tags:
        - devices
      parameters:
        - $ref: '#/components/parameters/deviceAlias'
        - $ref: '#/components/parameters/eventTop'
        - $ref: '#/components/parameters/eventBottom'
      summary: Reading the EventLog filtered for a specific Device.
      description: Reading the EventLog filtered for a specific Device.
      responses:
        '200':
          description: >-
            Successful operation. In case of empty event log, an empty array is
            returned.
          content:
            application/json:
              schema:
                $ref: './schemas.yaml#/deviceEventsGet'
        '400': # code 305, 306
          $ref: '#/components/responses/HTTP_400'
        '403':
          $ref: '#/components/responses/HTTP_403'
        '404':
          $ref: '#/components/responses/HTTP_404'
        '500':
          $ref: '#/components/responses/HTTP_500'
components:
  #---------------------------------------------------------------------------
  parameters:
    vendorId:
      name: vendorId
      in: query
      description: IO-Link VendorID
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 65535
    deviceId:
      name: deviceId
      in: query
      description: IO-Link DeviceID
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 16777215
    revision:
      name: revision
      in: query
      description: IO-Link Revision
      required: false
      schema:
        type: string
        enum:
          - '1.0'
          - '1.1'
    mqttTopicId:
      name: topicId
      in: path
      description: >-
        ID of a configured MQTT topic. This the position of the topic in the
        topics list.
      required: true
      schema:
        type: integer
    masterNumber:
      name: masterNumber
      in: path
      description: Master identification number starting with 1
      schema:
        type: integer
        minimum: 1
      required: true
    trackNumber:
      name: trackNumber
      in: path
      description: trackNumber identification number starting with 1
      schema:
        type: integer
        minimum: 1
      required: true
    portNumber:
      name: portNumber
      in: path
      description: Port identification number starting with 1
      schema:
        type: integer
        minimum: 1
      required: true
    deviceAlias:
      name: deviceAlias
      in: path
      description: >-
        Device Name configured with the port/configuration URL. Default Device
        Name is 'masterNportM' where 'N' means the masterNumber and 'M' means
        the portNumber.
      schema:
        type: string
        minLength: 1
        maxLength: 32
      required: true
    eventOrigin:
      name: origin
      in: query
      description: The event source to filter
      schema:
        $ref: './schemas.yaml#/eventOrigin'
    eventMasterNumber:
      name: masterNumber
      in: query
      description: masterNumber is only applicable with origin=MASTERS and origin=PORTS
      schema:
        $ref: './schemas.yaml#/eventMasterNumber'
    eventPortNumber:
      name: portNumber
      in: query
      description: portnumber is only applicable with origin=PORTS
      schema:
        $ref: './schemas.yaml#/eventPortNumber'
    eventdeviceAlias:
      name: deviceAlias
      in: query
      description: deviceAlias is only applicable with origin=DEVICES
      schema:
        $ref: './schemas.yaml#/eventdeviceAlias'
    eventTop:
      name: top
      in: query
      description: >-
        Delivers or removes the oldest n events of the event buffer. top is mutually
        exclusive to bottom.
      schema:
        $ref: './schemas.yaml#/eventTop'
    eventBottom:
      name: bottom
      in: query
      description: >-
        Delivers or removes the youngest n events of the event buffer. bottom is mutually
        exclusive to top.
      schema:
        $ref: './schemas.yaml#/eventBottom'
    format:
      name: format
      in: query
      description: Value format in response document
      schema:
        $ref: './schemas.yaml#/format'
    index:
      name: index
      in: path
      description: Index of ISDU variable
      schema:
        type: integer
        minimum: 0
        maximum: 65535
      required: true
    subindex:
      name: subindex
      in: path
      description: Subindex of ISDU variable with the given index
      schema:
        type: integer
        minimum: 0
        maximum: 255
      required: true
    parameterName:
      name: parameterName
      in: path
      description: >-
        Parameter name. Comes from the IODD but might be reformatted according
        to the JSON mapping specification.
      schema:
        type: string
        minLength: 1
        maxLength: 71
      required: true
    subParameterName:
      name: subParameterName
      in: path
      description: >-
        Sub-parameter name. Comes from the IODD but might be reformatted
        according to the JSON mapping specification.
      schema:
        type: string
        minLength: 1
        maxLength: 71
      required: true
  responses:
    HTTP_400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/errorObject'
          examples:
            '104':
              description: Fieldbus controller or another gateway protocol has claimed priority
              value:
                code: 104
                message: Action locked by another client
            '201':
              description: Error while parsing the incoming JSON object
              value:
                code: 201
                message: JSON parsing failed
            '202':
              description: Error while parsing a specific JSON value, e.g. a malformed IP address
              value:
                code: 202
                message: JSON data value invalid
            '203':
              description: e.g. string instead of number
              value:
                code: 203
                message: JSON data type invalid
            '204':
              value:
                code: 204
                message: Enumeration value unknown
            '205':
              description: Exceeds the minimum or maximum value
              value:
                code: 205
                message: JSON data value out of range
            '206':
              description: An array or string was accessed exceeding its maximum length
              value:
                code: 206
                message: JSON data value out of bounds
            '208':
              value:
                code: 208
                message: POST or PUT request without content
            '305':
              value:
                code: 305
                message: Query parameter name invalid
            '306':
              value:
                code: 306
                message: Query parameter value invalid
            '307':
              value:
                code: 307
                message: Port is not configured to IO-Link
            '311':
              value:
                code: 311
                message: IO-Link parameter access error
            '401':
              value:
                code: 401
                message: Data storage mismatch
            '501':
              value:
                code: 501
                message: I/Q is not configured as DIGITAL_OUTPUT
            '502':
              value:
                code: 502
                message: C/Q is not configured as DIGITAL_OUTPUT
            '503':
              value:
                code: 503
                message: IO-Link Device has no output process data
            '601':
              value:
                code: 601
                message: IODD (representation) for this IO-Link device is not available
            '603':
              value:
                code: 603
                message: IODD upload failed. IODD XML invalid
            '604':
              value:
                code: 604
                message: IODD upload failed. CRC error
            '605':
              value:
                code: 605
                message: IODD upload failed. Parsing error
            '701':
              value:
                code: 701
                message: Data set incomplete
            '702':
              description: whole data set is rejected
              value:
                code: 702
                message: Data set not applicable
            '703':
              description: whole data set is rejected
              value:
                code: 703
                message: Data set combination incompatible
    HTTP_401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/errorObject'
          examples:
            '150':
              description: due to user management restrictions
              value:
                code: 140
                message: Invalid credentials
    HTTP_403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/errorObject'
          examples:
            '150':
              description: due to user management restrictions
              value:
                code: 150
                message: Permission denied
    HTTP_404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/errorObject'
          examples:
            '103':
              value:
                code: 103
                message: Operation not supported
            '301':
              description: e.g. wrong URL
              value:
                code: 301
                message: Resource not found
            '302':
              value:
                code: 302
                message: masterNumber not found
            '303':
              value:
                code: 303
                message: portNumber not found
            '304':
              value:
                code: 304
                message: deviceAlias not found
            '308':
              description: e.g. not connected or communication error
              value:
                code: 308
                message: IO-Link Device is not accessible
            '309':
              value:
                code: 309
                message: IO-Link Parameter not found
            '310':
              value:
                code: 310
                message: IO-Link parameter access not supported by the Device
            '312':
              value:
                code: 312
                message: IO-Link parameter name is not unique
    HTTP_500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/errorObject'
          examples:
            '101':
              value:
                code: 101
                message: Internal server error
            '102':
              value:
                code: 102
                message: Internal communication error
            '602':
              value:
                code: 602
                message: IODD upload failed. Not enough memory
    HTTP_501:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/errorObject'
          examples:
            '105':
              value:
                code: 105
                message: IODD feature not supported
            '106':
              value:
                code: 106
                message: MQTT feature not supported
    HTTP_503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/errorObject'
          examples:
            '107':
              value:
                code: 107
                message: 'Service temporarily unavailable'
